/*
 * BajajHotelManagementLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost5000.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost5000.ApiHelper;
import localhost5000.AuthManager;
import localhost5000.Configuration;
import localhost5000.exceptions.ApiException;
import localhost5000.exceptions.HttpLocalhost5000ApiBookingsBookroom1Exception;
import localhost5000.http.Headers;
import localhost5000.http.client.HttpClient;
import localhost5000.http.client.HttpContext;
import localhost5000.http.request.HttpRequest;
import localhost5000.http.response.HttpResponse;
import localhost5000.http.response.HttpStringResponse;
import localhost5000.models.HttpLocalhost5000ApiAdminbAdminlogin;
import localhost5000.models.HttpLocalhost5000ApiAdminbAdminloginrequest;
import localhost5000.models.HttpLocalhost5000ApiBookingsCancelbookingrequest;
import localhost5000.models.HttpLocalhost5000ApiBookingsGetallbooking;
import localhost5000.models.HttpLocalhost5000ApiBookingsGetuserbooking;
import localhost5000.models.HttpLocalhost5000ApiBookingsGetuserbookingsrequest;
import localhost5000.models.HttpLocalhost5000ApiRoomsAddroomrequest;
import localhost5000.models.HttpLocalhost5000ApiRoomsDeleteroomrequest;
import localhost5000.models.HttpLocalhost5000ApiRoomsGetallroom;
import localhost5000.models.HttpLocalhost5000ApiRoomsGetroombyid;
import localhost5000.models.HttpLocalhost5000ApiRoomsGetroombyidrequest;
import localhost5000.models.HttpLocalhost5000ApiUsersDeleteuserrequest;
import localhost5000.models.HttpLocalhost5000ApiUsersGetalluser;
import localhost5000.models.HttpLocalhost5000ApiUsersLogin;
import localhost5000.models.HttpLocalhost5000ApiUsersLoginrequest;
import localhost5000.models.HttpLocalhost5000ApiUsersRegisterrequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MiscController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public MiscController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * http://localhost:5000/api/users/register.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String httpLocalhost5000ApiUsersRegister(
            final HttpLocalhost5000ApiUsersRegisterrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiUsersRegisterRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiUsersRegisterResponse(context);
    }

    /**
     * http://localhost:5000/api/users/register.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> httpLocalhost5000ApiUsersRegisterAsync(
            final HttpLocalhost5000ApiUsersRegisterrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiUsersRegisterRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiUsersRegisterResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiUsersRegister.
     */
    private HttpRequest buildHttpLocalhost5000ApiUsersRegisterRequest(
            final HttpLocalhost5000ApiUsersRegisterrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/register");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiUsersRegister.
     * @return An object of type String
     */
    private String handleHttpLocalhost5000ApiUsersRegisterResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String result = ((HttpStringResponse) response).getBody();
        return result;
    }

    /**
     * http://localhost:5000/api/users/login.
     * @param  body  Required parameter: Example:
     * @return    Returns the HttpLocalhost5000ApiUsersLogin response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public HttpLocalhost5000ApiUsersLogin httpLocalhost5000ApiUsersLogin(
            final HttpLocalhost5000ApiUsersLoginrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiUsersLoginRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiUsersLoginResponse(context);
    }

    /**
     * http://localhost:5000/api/users/login.
     * @param  body  Required parameter: Example:
     * @return    Returns the HttpLocalhost5000ApiUsersLogin response from the API call
     */
    public CompletableFuture<HttpLocalhost5000ApiUsersLogin> httpLocalhost5000ApiUsersLoginAsync(
            final HttpLocalhost5000ApiUsersLoginrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiUsersLoginRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiUsersLoginResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiUsersLogin.
     */
    private HttpRequest buildHttpLocalhost5000ApiUsersLoginRequest(
            final HttpLocalhost5000ApiUsersLoginrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/login");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiUsersLogin.
     * @return An object of type HttpLocalhost5000ApiUsersLogin
     */
    private HttpLocalhost5000ApiUsersLogin handleHttpLocalhost5000ApiUsersLoginResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        HttpLocalhost5000ApiUsersLogin result = ApiHelper.deserialize(responseBody,
                HttpLocalhost5000ApiUsersLogin.class);

        return result;
    }

    /**
     * http://localhost:5000/api/users/getallusers.
     * @return    Returns the List of HttpLocalhost5000ApiUsersGetalluser response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<HttpLocalhost5000ApiUsersGetalluser> httpLocalhost5000ApiUsersGetallusers() throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiUsersGetallusersRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiUsersGetallusersResponse(context);
    }

    /**
     * http://localhost:5000/api/users/getallusers.
     * @return    Returns the List of HttpLocalhost5000ApiUsersGetalluser response from the API call
     */
    public CompletableFuture<List<HttpLocalhost5000ApiUsersGetalluser>> httpLocalhost5000ApiUsersGetallusersAsync() {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiUsersGetallusersRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiUsersGetallusersResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiUsersGetallusers.
     */
    private HttpRequest buildHttpLocalhost5000ApiUsersGetallusersRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/getallusers");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiUsersGetallusers.
     * @return An object of type List of HttpLocalhost5000ApiUsersGetalluser
     */
    private List<HttpLocalhost5000ApiUsersGetalluser> handleHttpLocalhost5000ApiUsersGetallusersResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<HttpLocalhost5000ApiUsersGetalluser> result = ApiHelper.deserializeArray(responseBody,
                HttpLocalhost5000ApiUsersGetalluser[].class);
        return result;
    }

    /**
     * http://localhost:5000/api/users/deleteuser.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String httpLocalhost5000ApiUsersDeleteuser(
            final HttpLocalhost5000ApiUsersDeleteuserrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiUsersDeleteuserRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiUsersDeleteuserResponse(context);
    }

    /**
     * http://localhost:5000/api/users/deleteuser.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> httpLocalhost5000ApiUsersDeleteuserAsync(
            final HttpLocalhost5000ApiUsersDeleteuserrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiUsersDeleteuserRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiUsersDeleteuserResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiUsersDeleteuser.
     */
    private HttpRequest buildHttpLocalhost5000ApiUsersDeleteuserRequest(
            final HttpLocalhost5000ApiUsersDeleteuserrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/users/deleteuser");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiUsersDeleteuser.
     * @return An object of type String
     */
    private String handleHttpLocalhost5000ApiUsersDeleteuserResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String result = ((HttpStringResponse) response).getBody();
        return result;
    }

    /**
     * http://localhost:5000/api/rooms/getallrooms.
     * @return    Returns the List of HttpLocalhost5000ApiRoomsGetallroom response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<HttpLocalhost5000ApiRoomsGetallroom> httpLocalhost5000ApiRoomsGetallrooms() throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiRoomsGetallroomsRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiRoomsGetallroomsResponse(context);
    }

    /**
     * http://localhost:5000/api/rooms/getallrooms.
     * @return    Returns the List of HttpLocalhost5000ApiRoomsGetallroom response from the API call
     */
    public CompletableFuture<List<HttpLocalhost5000ApiRoomsGetallroom>> httpLocalhost5000ApiRoomsGetallroomsAsync() {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiRoomsGetallroomsRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiRoomsGetallroomsResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiRoomsGetallrooms.
     */
    private HttpRequest buildHttpLocalhost5000ApiRoomsGetallroomsRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/rooms/getallrooms");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiRoomsGetallrooms.
     * @return An object of type List of HttpLocalhost5000ApiRoomsGetallroom
     */
    private List<HttpLocalhost5000ApiRoomsGetallroom> handleHttpLocalhost5000ApiRoomsGetallroomsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<HttpLocalhost5000ApiRoomsGetallroom> result = ApiHelper.deserializeArray(responseBody,
                HttpLocalhost5000ApiRoomsGetallroom[].class);
        return result;
    }

    /**
     * http://localhost:5000/api/adminb/adminlogin.
     * @param  body  Required parameter: Example:
     * @return    Returns the HttpLocalhost5000ApiAdminbAdminlogin response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public HttpLocalhost5000ApiAdminbAdminlogin httpLocalhost5000ApiAdminbAdminlogin(
            final HttpLocalhost5000ApiAdminbAdminloginrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiAdminbAdminloginRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiAdminbAdminloginResponse(context);
    }

    /**
     * http://localhost:5000/api/adminb/adminlogin.
     * @param  body  Required parameter: Example:
     * @return    Returns the HttpLocalhost5000ApiAdminbAdminlogin response from the API call
     */
    public CompletableFuture<HttpLocalhost5000ApiAdminbAdminlogin> httpLocalhost5000ApiAdminbAdminloginAsync(
            final HttpLocalhost5000ApiAdminbAdminloginrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiAdminbAdminloginRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiAdminbAdminloginResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiAdminbAdminlogin.
     */
    private HttpRequest buildHttpLocalhost5000ApiAdminbAdminloginRequest(
            final HttpLocalhost5000ApiAdminbAdminloginrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/adminb/adminlogin");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiAdminbAdminlogin.
     * @return An object of type HttpLocalhost5000ApiAdminbAdminlogin
     */
    private HttpLocalhost5000ApiAdminbAdminlogin handleHttpLocalhost5000ApiAdminbAdminloginResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        HttpLocalhost5000ApiAdminbAdminlogin result = ApiHelper.deserialize(responseBody,
                HttpLocalhost5000ApiAdminbAdminlogin.class);

        return result;
    }

    /**
     * http://localhost:5000/api/rooms/addroom.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String httpLocalhost5000ApiRoomsAddroom(
            final HttpLocalhost5000ApiRoomsAddroomrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiRoomsAddroomRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiRoomsAddroomResponse(context);
    }

    /**
     * http://localhost:5000/api/rooms/addroom.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> httpLocalhost5000ApiRoomsAddroomAsync(
            final HttpLocalhost5000ApiRoomsAddroomrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiRoomsAddroomRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiRoomsAddroomResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiRoomsAddroom.
     */
    private HttpRequest buildHttpLocalhost5000ApiRoomsAddroomRequest(
            final HttpLocalhost5000ApiRoomsAddroomrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/rooms/addroom");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiRoomsAddroom.
     * @return An object of type String
     */
    private String handleHttpLocalhost5000ApiRoomsAddroomResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String result = ((HttpStringResponse) response).getBody();
        return result;
    }

    /**
     * http://localhost:5000/api/bookings/bookroom.
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void httpLocalhost5000ApiBookingsBookroom(
            final String body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiBookingsBookroomRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleHttpLocalhost5000ApiBookingsBookroomResponse(context);
    }

    /**
     * http://localhost:5000/api/bookings/bookroom.
     * @param  body  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> httpLocalhost5000ApiBookingsBookroomAsync(
            final String body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiBookingsBookroomRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiBookingsBookroomResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiBookingsBookroom.
     */
    private HttpRequest buildHttpLocalhost5000ApiBookingsBookroomRequest(
            final String body) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bookings/bookroom");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "text/plain; charset=utf-8");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = body;
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiBookingsBookroom.
     * @return An object of type void
     */
    private Void handleHttpLocalhost5000ApiBookingsBookroomResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new HttpLocalhost5000ApiBookingsBookroom1Exception("Bad Request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * http://localhost:5000/api/rooms/getroombyid.
     * @param  body  Required parameter: Example:
     * @return    Returns the HttpLocalhost5000ApiRoomsGetroombyid response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public HttpLocalhost5000ApiRoomsGetroombyid httpLocalhost5000ApiRoomsGetroombyid(
            final HttpLocalhost5000ApiRoomsGetroombyidrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiRoomsGetroombyidRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiRoomsGetroombyidResponse(context);
    }

    /**
     * http://localhost:5000/api/rooms/getroombyid.
     * @param  body  Required parameter: Example:
     * @return    Returns the HttpLocalhost5000ApiRoomsGetroombyid response from the API call
     */
    public CompletableFuture<HttpLocalhost5000ApiRoomsGetroombyid> httpLocalhost5000ApiRoomsGetroombyidAsync(
            final HttpLocalhost5000ApiRoomsGetroombyidrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiRoomsGetroombyidRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiRoomsGetroombyidResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiRoomsGetroombyid.
     */
    private HttpRequest buildHttpLocalhost5000ApiRoomsGetroombyidRequest(
            final HttpLocalhost5000ApiRoomsGetroombyidrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/rooms/getroombyid");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiRoomsGetroombyid.
     * @return An object of type HttpLocalhost5000ApiRoomsGetroombyid
     */
    private HttpLocalhost5000ApiRoomsGetroombyid handleHttpLocalhost5000ApiRoomsGetroombyidResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        HttpLocalhost5000ApiRoomsGetroombyid result = ApiHelper.deserialize(responseBody,
                HttpLocalhost5000ApiRoomsGetroombyid.class);

        return result;
    }

    /**
     * http://localhost:5000/api/bookings/cancelbooking.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String httpLocalhost5000ApiBookingsCancelbooking(
            final HttpLocalhost5000ApiBookingsCancelbookingrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiBookingsCancelbookingRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiBookingsCancelbookingResponse(context);
    }

    /**
     * http://localhost:5000/api/bookings/cancelbooking.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> httpLocalhost5000ApiBookingsCancelbookingAsync(
            final HttpLocalhost5000ApiBookingsCancelbookingrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiBookingsCancelbookingRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiBookingsCancelbookingResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiBookingsCancelbooking.
     */
    private HttpRequest buildHttpLocalhost5000ApiBookingsCancelbookingRequest(
            final HttpLocalhost5000ApiBookingsCancelbookingrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bookings/cancelbooking");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiBookingsCancelbooking.
     * @return An object of type String
     */
    private String handleHttpLocalhost5000ApiBookingsCancelbookingResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String result = ((HttpStringResponse) response).getBody();
        return result;
    }

    /**
     * http://localhost:5000/api/bookings/getuserbookings.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of HttpLocalhost5000ApiBookingsGetuserbooking response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<HttpLocalhost5000ApiBookingsGetuserbooking> httpLocalhost5000ApiBookingsGetuserbookings(
            final HttpLocalhost5000ApiBookingsGetuserbookingsrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiBookingsGetuserbookingsRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiBookingsGetuserbookingsResponse(context);
    }

    /**
     * http://localhost:5000/api/bookings/getuserbookings.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of HttpLocalhost5000ApiBookingsGetuserbooking response from the API call
     */
    public CompletableFuture<List<HttpLocalhost5000ApiBookingsGetuserbooking>> httpLocalhost5000ApiBookingsGetuserbookingsAsync(
            final HttpLocalhost5000ApiBookingsGetuserbookingsrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiBookingsGetuserbookingsRequest(
                body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiBookingsGetuserbookingsResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiBookingsGetuserbookings.
     */
    private HttpRequest buildHttpLocalhost5000ApiBookingsGetuserbookingsRequest(
            final HttpLocalhost5000ApiBookingsGetuserbookingsrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bookings/getuserbookings");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiBookingsGetuserbookings.
     * @return An object of type List of HttpLocalhost5000ApiBookingsGetuserbooking
     */
    private List<HttpLocalhost5000ApiBookingsGetuserbooking> handleHttpLocalhost5000ApiBookingsGetuserbookingsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<HttpLocalhost5000ApiBookingsGetuserbooking> result = ApiHelper.deserializeArray(responseBody,
                HttpLocalhost5000ApiBookingsGetuserbooking[].class);
        return result;
    }

    /**
     * http://localhost:5000/api/bookings/getallbookings.
     * @return    Returns the List of HttpLocalhost5000ApiBookingsGetallbooking response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<HttpLocalhost5000ApiBookingsGetallbooking> httpLocalhost5000ApiBookingsGetallbookings() throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiBookingsGetallbookingsRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiBookingsGetallbookingsResponse(context);
    }

    /**
     * http://localhost:5000/api/bookings/getallbookings.
     * @return    Returns the List of HttpLocalhost5000ApiBookingsGetallbooking response from the API call
     */
    public CompletableFuture<List<HttpLocalhost5000ApiBookingsGetallbooking>> httpLocalhost5000ApiBookingsGetallbookingsAsync() {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiBookingsGetallbookingsRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiBookingsGetallbookingsResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiBookingsGetallbookings.
     */
    private HttpRequest buildHttpLocalhost5000ApiBookingsGetallbookingsRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/bookings/getallbookings");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiBookingsGetallbookings.
     * @return An object of type List of HttpLocalhost5000ApiBookingsGetallbooking
     */
    private List<HttpLocalhost5000ApiBookingsGetallbooking> handleHttpLocalhost5000ApiBookingsGetallbookingsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<HttpLocalhost5000ApiBookingsGetallbooking> result = ApiHelper.deserializeArray(responseBody,
                HttpLocalhost5000ApiBookingsGetallbooking[].class);
        return result;
    }

    /**
     * http://localhost:5000/api/rooms/deleteroom.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public String httpLocalhost5000ApiRoomsDeleteroom(
            final HttpLocalhost5000ApiRoomsDeleteroomrequest body) throws ApiException, IOException {
        HttpRequest request = buildHttpLocalhost5000ApiRoomsDeleteroomRequest(body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHttpLocalhost5000ApiRoomsDeleteroomResponse(context);
    }

    /**
     * http://localhost:5000/api/rooms/deleteroom.
     * @param  body  Required parameter: Example:
     * @return    Returns the String response from the API call
     */
    public CompletableFuture<String> httpLocalhost5000ApiRoomsDeleteroomAsync(
            final HttpLocalhost5000ApiRoomsDeleteroomrequest body) {
        return makeHttpCallAsync(() -> buildHttpLocalhost5000ApiRoomsDeleteroomRequest(body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHttpLocalhost5000ApiRoomsDeleteroomResponse(context));
    }

    /**
     * Builds the HttpRequest object for httpLocalhost5000ApiRoomsDeleteroom.
     */
    private HttpRequest buildHttpLocalhost5000ApiRoomsDeleteroomRequest(
            final HttpLocalhost5000ApiRoomsDeleteroomrequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/rooms/deleteroom");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("content-type", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for httpLocalhost5000ApiRoomsDeleteroom.
     * @return An object of type String
     */
    private String handleHttpLocalhost5000ApiRoomsDeleteroomResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String result = ((HttpStringResponse) response).getBody();
        return result;
    }

}